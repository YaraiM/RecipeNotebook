<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="raisetech.RecipeNotebook.repository.RecipeRepository">

  <!-- 検索条件に紐づくレシピ一覧の取得  -->
  <select id="getRecipes" resultType="raisetech.RecipeNotebook.data.Recipe">
    SELECT * FROM recipes
    <where>
      <if test="recipeNames != null and !recipeNames.isEmpty()">
        <foreach item="recipeName" collection="recipeNames" open="(" separator=" AND " close=")">
          name LIKE CONCAT('%', #{recipeName}, '%')
        </foreach>
      </if>
      <if test="favoriteRecipe != null">
        AND favorite = #{favoriteRecipe}
      </if>
      <if test="createDateFrom != null">
        AND CAST(created_at AS DATE) >= #{createDateFrom}
      </if>
      <if test="createDateTo != null">
        AND CAST(created_at AS DATE) &lt;= #{createDateTo}
      </if>
      <if test="updateDateFrom != null">
        AND CAST(updated_at AS DATE) >= #{updateDateFrom}
      </if>
      <if test="updateDateTo != null">
        AND CAST(updated_at AS DATE) &lt;= #{updateDateTo}
      </if>
    </where>
  </select>

  <!--  レシピの取得  -->
  <select id="getRecipe" resultType="raisetech.RecipeNotebook.data.Recipe">
    SELECT * FROM recipes WHERE id = #{id}
  </select>

  <!--  材料の全件取得  -->
  <select id="getAllIngredients" resultType="raisetech.RecipeNotebook.data.Ingredient">
    SELECT * FROM ingredients
  </select>

  <!--  レシピIDに紐づく材料一覧の取得  -->
  <select id="getIngredients" resultType="raisetech.RecipeNotebook.data.Ingredient">
    SELECT * FROM ingredients WHERE recipe_id = #{recipeId}
  </select>

  <!--  IDに紐づく材料の取得  -->
  <select id="getIngredient" resultType="raisetech.RecipeNotebook.data.Ingredient">
    SELECT * FROM ingredients WHERE id = #{id}
  </select>

  <!-- キーワード指定した材料名に一致するレシピIDを取得 -->
  <select id="getRecipeIdsWithMatchingIngredients" resultType="java.lang.Integer">
    SELECT DISTINCT i.recipe_id
    FROM ingredients i
    WHERE i.recipe_id IN
    <foreach item="id" collection="recipeIds" open="(" separator="," close=")">
      #{id}
    </foreach>
    <if test="ingredientNames != null and !ingredientNames.isEmpty()">
      AND (
      <foreach item="ingredientName" collection="ingredientNames" separator=" OR ">
        i.name LIKE CONCAT('%', #{ingredientName}, '%')
      </foreach>
      )
      GROUP BY i.recipe_id
      <!--  あるレシピIDにおいて、検索キーワードの数と同等かそれ以上の材料IDが抽出された場合に限り集約する（＝複数キーワードに合致するレシピ詳細のみ抽出される）  -->
      HAVING COUNT(DISTINCT i.name) >= (
      <foreach item="ingredientName" collection="ingredientNames" open="" separator=" + " close="">
        1
      </foreach>
      )
    </if>
  </select>

  <!--  調理手順の全件取得  -->
  <select id="getAllInstructions" resultType="raisetech.RecipeNotebook.data.Instruction">
    SELECT * FROM instructions
  </select>

  <!--  レシピIDに紐づく調理手順一覧の取得  -->
  <select id="getInstructions" resultType="raisetech.RecipeNotebook.data.Instruction">
    SELECT * FROM instructions WHERE recipe_id = #{recipeId}
  </select>

  <!--  IDに紐づく調理手順の取得  -->
  <select id="getInstruction" resultType="raisetech.RecipeNotebook.data.Instruction">
    SELECT * FROM instructions WHERE id = #{id}
  </select>

  <!--  レシピの新規登録  -->
  <insert id="registerRecipe" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO recipes(name, image_path, recipe_source, servings, remark, favorite, created_at)
    values(#{name}, #{imagePath}, #{recipeSource}, #{servings}, #{remark}, #{favorite},
    #{createdAt})
  </insert>

  <!--  レシピの材料の新規登録  -->
  <insert id="registerIngredient" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO ingredients(recipe_id, name, quantity, arrange)
    values(#{recipeId}, #{name}, #{quantity}, #{arrange})
  </insert>

  <!--  レシピの調理手順の新規登録  -->
  <insert id="registerInstruction" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO instructions(recipe_id, step_number, content, arrange)
    values(#{recipeId}, #{stepNumber}, #{content}, #{arrange})
  </insert>

  <!--  レシピの更新  -->
  <update id="updateRecipe">
    UPDATE recipes SET name=#{name}, image_path=#{imagePath}, recipe_source=#{recipeSource},
    servings=#{servings}, remark=#{remark}, favorite=#{favorite}, updated_at=#{updatedAt}
    WHERE id=#{id}
  </update>

  <update id="updateFavoriteStatus">
    UPDATE recipes SET favorite=#{favorite} WHERE id=#{id}
  </update>

  <!--  レシピの材料の更新  -->
  <update id="updateIngredient">
    UPDATE ingredients SET name=#{name}, quantity=#{quantity}, arrange=#{arrange}
    WHERE id=#{id}
  </update>

  <!--  レシピの調理手順の更新  -->
  <update id="updateInstruction">
    UPDATE instructions SET step_number=#{stepNumber}, content=#{content},
    arrange=#{arrange}
    WHERE id=#{id}
  </update>

  <!--  レシピの削除  -->
  <delete id="deleteRecipe">
    DELETE FROM recipes WHERE id=#{id};
  </delete>

  <!--  レシピの材料の削除  -->
  <delete id="deleteIngredient">
    DELETE FROM ingredients WHERE id=#{id};
  </delete>

  <!--  レシピの調理手順の削除  -->
  <delete id="deleteInstruction">
    DELETE FROM instructions WHERE id=#{id};
  </delete>

</mapper>
